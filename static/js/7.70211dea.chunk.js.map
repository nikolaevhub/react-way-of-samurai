{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.js","utils/validarors/validators.js","components/Login/Login.jsx"],"names":["module","exports","FormControl","input","meta","touched","error","props","hasError","className","styles","formControl","Textarea","Input","createField","placeholder","name","validators","component","text","validate","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","src","alt","formSummaryError","Login","isAuth","to","formData","login","email","password","rememberMe","captcha","connect","state","auth"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,+LCGrHC,EAAc,SAAAA,GAAW,OAAI,YAAgD,IAA9CC,EAA6C,EAA7CA,MAA6C,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAWC,EAAW,gCACxEC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOJ,MAAQ,KAClE,kBAAC,EAAD,iBAAiBH,EAAWI,IAC3BC,GAAY,kCAAQF,EAAR,QAKZM,EAAWV,EAAY,YAEvBW,EAAQX,EAAY,SAEpBY,EAAc,SAACC,EAAaC,EAAMC,EAAYC,GAAsC,IAA3BX,EAA0B,uDAAlB,GAAIY,EAAc,uDAAP,GACrF,OACI,6BACI,kBAAC,IAAD,eAAOJ,YAAaA,EACbG,UAAWA,EACXF,KAAMA,EACNI,SAAUH,GACNV,IACRY,K,iCC1Bf,oEAAO,IAAME,EAAW,SAAAC,GACpB,IAAGA,EACH,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,iCCNlC,qIA4BME,EAAiBC,YAAU,CAC7BC,KAAM,SADaD,EAnBL,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAcvB,EAAuB,EAAvBA,MAAOwB,EAAgB,EAAhBA,WACrC,OACI,0BAAMC,SAAUF,GACXf,YAAY,QAAS,QAAS,CAACO,KAAWR,KAC1CC,YAAY,WAAY,WAAY,CAACO,KAAWR,IAAO,CAACmB,KAAM,aAC9DlB,YAAY,KAAM,cAAe,KAAMD,IAAO,CAACmB,KAAM,YAAa,eAGlEF,GAAc,yBAAKG,IAAKH,EAAYI,IAAI,YACxCJ,GAAchB,YAAY,UAAW,UAAW,CAACO,KAAWR,IAAO,IAEnEP,GAAS,yBAAKG,UAAWC,IAAOyB,kBAAmB7B,GACpD,6BACI,8CAUH8B,EAAQ,SAAC7B,GAMlB,OAAIA,EAAM8B,OACC,kBAAC,IAAD,CAAUC,GAAI,aAIrB,6BACI,qCACA,kBAACZ,EAAD,CAAgBK,SAXP,SAACQ,GACdhC,EAAMiC,MAAMD,EAASE,MAAOF,EAASG,SAAUH,EAASI,WAAYJ,EAASK,UAUrCd,WAAYvB,EAAMuB,eAUnDe,uBALS,SAACC,GAAD,MAAY,CAChCT,OAAQS,EAAMC,KAAKV,OACnBP,WAAYgB,EAAMC,KAAKjB,cAGa,CAACU,WAA1BK,CAAkCT","file":"static/js/7.70211dea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3jh4Z\",\"error\":\"FormsControls_error__2KkGE\",\"formSummaryError\":\"FormsControls_formSummaryError__3g1QG\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = FormControl => ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <FormControl {...input} {...props} />\r\n            {hasError && <span> {error} </span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = FormControl('textarea');\r\n\r\nexport const Input = FormControl('input')\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = '') => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   component={component}\r\n                   name={name}\r\n                   validate={validators}\r\n                   {...props}\r\n            />{text}\r\n        </div>\r\n    )\r\n}","export const required = value => {\r\n    if(value) return undefined;\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from 'react';\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validarors/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from './../common/FormsControls/FormsControls.module.css';\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField('Email', 'email', [required], Input)}\r\n            {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField(null, 'remember me', null, Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt=\"Captcha\"/>}\r\n            {captchaUrl && createField('Symbols', 'captcha', [required], Input, {})}\r\n\r\n            {error && <div className={styles.formSummaryError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst LoginReduxForm = reduxForm({\r\n    form: 'login'\r\n})(LoginForm);\r\n\r\nexport const Login = (props) => {\r\n\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}